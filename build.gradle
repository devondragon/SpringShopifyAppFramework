plugins {
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'java'
	id "com.github.ben-manes.versions" version "0.50.0"
	id "com.github.node-gradle.node" version "7.0.1"
}

group = 'com.justblackmagic'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	dev
}

repositories {
	mavenCentral()
	// maven { url 'https://repo.spring.io/milestone' }
    // maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-jersey'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.1.2.RELEASE'
	implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.3.0'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'joda-time:joda-time:2.12.5'
	implementation 'org.apache.commons:commons-lang3:3.14.0'
	implementation 'org.apache.commons:commons-text:1.11.0'
	implementation 'com.github.rholder:guava-retrying:2.0.0'
	implementation 'com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider:2.16.1'
	implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.16.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.16.0'
	implementation 'commons-io:commons-io:2.15.1'
 	implementation 'io.netty:netty-resolver-dns-native-macos:4.1.98.Final:osx-aarch_64'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.3.2'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// runtimeOnly 'io.micrometer:micrometer-registry-new-relic'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2:2.2.224'
	implementation 'com.github.rest-driver:rest-driver:2.0.1'
}

tasks.named('test') {
  useJUnitPlatform()
}

node {
    version = '18'
}

task buildReactApp(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
    args = [
            '--mode', 'development',
            '--entry', './src/main/webapp/javascript/MyApp.jsx',
            '-o', './src/main/resources/static/dist'
    ]
}

processResources.dependsOn 'buildReactApp'


bootJar {

    launchScript{
        properties 'confFolder': '/opt/app/conf/'
    }
}

bootRun {
    // Use Spring Boot DevTool only when we run Gradle bootRun task
    classpath = sourceSets.main.runtimeClasspath + configurations.dev

    if (project.hasProperty('profiles')) {
		environment SPRING_PROFILES_ACTIVE: profiles
	} else {
		def profiles = 'local'
		environment SPRING_PROFILES_ACTIVE: profiles
	}
}
